#!/bin/bash

function redis-client() {
    FD=${1}
    shift;
    if [ ${#} -ne 0 ]; then # always use unified protocol and let the server validate the number of parameters
        local ARRAY=( "${@}" )
        local CMD=("*$[${#ARRAY[@]}]")
        local i=0
        for ((i=0;i<${#ARRAY[@]};i++)); do
            CMD=( "${CMD[@]}" "\$${#ARRAY[${i}]}" "${ARRAY[${i}]}" )
        done
        printf "%s\r\n" "${CMD[@]}" >&${FD}
    fi
    local ARGV
    read -r -u ${FD}
    REPLY=${REPLY:0:${#REPLY}-1}
    case ${REPLY} in
        -*|\$-*) # error message
            echo "${REPLY:1}"
            return 1;;
        \$*) # message size
            [ ${BASH_VERSINFO} -eq 3 ] && SIZEDELIM="n"
            [ ${REPLY:1} -gt 0 ] && read -r -${SIZEDELIM:-N} $[${REPLY:1}+2] -u ${FD} # read again to get the value itself
            ARGV=( "${REPLY:0:$[${#REPLY}-$[${BASH_VERSINFO}-2]]}" );;
        :*) # integer message
            ARGV=( "${REPLY:1}" );;
        \**) # bulk reply - recursive based on number of messages
            unset ARGV
            for ((ARGC="${REPLY:1}";${ARGC}>0;ARGC--)); do
                ARGV=("${ARGV[@]}" $(redis-client ${FD}))
            done;;
        +*) # standard message
            ARGV=( "${REPLY:1}" );;
        *) # wtf? just in case...
            ARGV=( "${ARGV[@]}" "${REPLY}" );;
    esac
    printf "%s\n" "${ARGV[@]}"
}

if [ $? -ne 0 ]; then
  LIBFOLDER=${0%/${0##*/}}
  source ${LIBFOLDER}/redis-bash-lib 2> /dev/null
  if [ $? -ne 0 ]; then
    echo "can't find redis-bash-lib in /usr/share/redis-bash or ${LIBFOLDER}"
    exit 127 
  fi
fi
REDISHOST=localhost
REDISPORT=6379
REPEAT=1
DELAY=0
while getopts ":h:n:p:r:a:i:" opt
do
    case ${opt} in
        h) REDISHOST=${OPTARG};;
        n) REDISDB=${OPTARG};;
        p) REDISPORT=${OPTARG};;
        r) REPEAT=${OPTARG};;
        a) AUTH=${OPTARG};;
        i) DELAY=${OPTARG};;
    esac
done
shift $((${OPTIND} - 1))
if [ "${REDISHOST}" != "" ] && [ "${REDISPORT}" != "" ]
then
    exec 6<>/dev/tcp/${REDISHOST}/${REDISPORT} # open fd
else
    echo "Wrong arguments"
    exit 255
fi
[ "${AUTH}" != "" ] && redis-client 6 AUTH ${AUTH} > /dev/null
[ "${REDISDB}" != "" ] && redis-client 6 SELECT ${REDISDB} > /dev/null
for ((z=1;z<=${REPEAT};z++))
do
    redis-client 6 "${@}"
    if [ $? -ne 0 ]; then
        exit 1
    fi
    [ ${DELAY} -gt 0 ] && sleep ${DELAY}
done
exec 6>&- #close fd
